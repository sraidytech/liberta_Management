# FIXED Optimized Production Docker Compose Override for 2-CPU VPS
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod-optimized-fixed.yml up -d

services:
  postgres:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Africa/Casablanca
      PGTZ: Africa/Casablanca
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M  # Reduced for 2-CPU server
          cpus: '0.5'
    command: >
      postgres
      -c shared_buffers=128MB
      -c max_connections=200
      -c effective_cache_size=256MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c idle_in_transaction_session_timeout=300000
      -c statement_timeout=300000
      -c lock_timeout=30000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  redis:
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    command: >
      redis-server
      --maxmemory 200mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  backend:
    environment:
      - NODE_ENV=production
      - TZ=Africa/Casablanca
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=${PORT}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - ECOMANAGER_WEBHOOK_SECRET=${ECOMANAGER_WEBHOOK_SECRET}
      - MAYSTRO_WEBHOOK_SECRET=${MAYSTRO_WEBHOOK_SECRET}
      - MAYSTRO_API_KEY=${MAYSTRO_API_KEY}
      - MAYSTRO_API_KEY_1=${MAYSTRO_API_KEY_1}
      - MAYSTRO_API_KEY_2=${MAYSTRO_API_KEY_2}
      - MAYSTRO_API_KEY_3=${MAYSTRO_API_KEY_3}
      - MAYSTRO_BASE_URL=${MAYSTRO_BASE_URL}
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    command: ["npm", "run", "dev"]
    deploy:
      resources:
        limits:
          memory: 768M  # Reduced for 2-CPU server
          cpus: '0.75'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    environment:
      - NODE_ENV=production
      - TZ=Africa/Casablanca
      - BACKEND_INTERNAL_URL=${BACKEND_INTERNAL_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Force Next.js to rebuild on container restart
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_CACHE_DISABLED=1
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # REMOVED: frontend_next volume to prevent caching issues
    restart: always
    command: ["npm", "run", "start"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  # REMOVED: frontend_next volume to prevent Next.js caching issues
