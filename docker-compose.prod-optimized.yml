# OPTIMIZED Production Docker Compose for 6-Core Intel Xeon Server
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod-optimized.yml up -d

services:
  postgres:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: Africa/Casablanca
      PGTZ: Africa/Casablanca
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G      # Increased for 6-core server with 12GB RAM
          cpus: '1.5'     # Increased from 0.5 to 1.5 cores
    command: >
      postgres
      -c shared_buffers=512MB
      -c max_connections=300
      -c effective_cache_size=1536MB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=64MB
      -c default_statistics_target=100
      -c work_mem=16MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c idle_in_transaction_session_timeout=300000
      -c statement_timeout=300000
      -c lock_timeout=30000
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  redis:
    volumes:
      - redis_prod_data:/data
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M    # Increased from 256M for 6-core server
          cpus: '0.5'     # Increased from 0.25
    command: >
      redis-server
      --maxmemory 400mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0

  backend:
    environment:
      - NODE_ENV=production
      - TZ=Africa/Casablanca
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=${PORT}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - ECOMANAGER_WEBHOOK_SECRET=${ECOMANAGER_WEBHOOK_SECRET}
      - MAYSTRO_WEBHOOK_SECRET=${MAYSTRO_WEBHOOK_SECRET}
      - MAYSTRO_API_KEY=${MAYSTRO_API_KEY}
      - MAYSTRO_API_KEY_1=${MAYSTRO_API_KEY_1}
      - MAYSTRO_API_KEY_2=${MAYSTRO_API_KEY_2}
      - MAYSTRO_API_KEY_3=${MAYSTRO_API_KEY_3}
      - MAYSTRO_BASE_URL=${MAYSTRO_BASE_URL}
      # Performance optimizations for 6-core server
      - UV_THREADPOOL_SIZE=16          # Increased thread pool
      - NODE_OPTIONS=--max-old-space-size=1536  # Increased heap size
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    command: ["npm", "run", "dev"]
    deploy:
      resources:
        limits:
          memory: 2G      # Increased from 768M to 2G for 6-core server
          cpus: '2.0'     # Increased from 0.75 to 2.0 cores
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    environment:
      - NODE_ENV=production
      - TZ=Africa/Casablanca
      - BACKEND_INTERNAL_URL=${BACKEND_INTERNAL_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Performance optimizations for 6-core server
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_OPTIONS=--max-old-space-size=1024  # Increased heap size
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    restart: always
    command: ["npm", "run", "start"]
    deploy:
      resources:
        limits:
          memory: 1G      # Increased from 512M to 1G for 6-core server
          cpus: '1.0'     # Increased from 0.5 to 1.0 core
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
  # REMOVED: frontend_next volume to prevent Next.js caching issues
