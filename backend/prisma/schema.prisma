// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(AGENT_SUIVI)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Agent-specific fields
  agentCode     String?           @unique
  availability  AgentAvailability @default(OFFLINE)
  maxOrders     Int               @default(50)
  currentOrders Int               @default(0)

  // Relations
  assignedOrders   Order[]
  agentActivities  AgentActivity[]
  notifications    Notification[]
  createdApiConfigs ApiConfiguration[] @relation("CreatedBy")
  commissionRates  AgentCommissionRate[] @relation("AgentCommissionRates")
  productConfirmationRates AgentProductConfirmationRate[] @relation("AgentProductConfirmationRates")
  activityLogs     ActivityLog[] @relation("UserActivityLogs")
  productAssignments UserProductAssignment[] @relation("UserProductAssignments")
  
  // Ticket system relations
  reportedTickets  Ticket[] @relation("ReportedTickets")
  assignedTickets  Ticket[] @relation("AssignedTickets")
  sentTicketMessages TicketMessage[] @relation("SentTicketMessages")

  // NextAuth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String   @id @default(cuid())
  fullName    String
  telephone   String
  email       String?
  wilaya      String
  commune     String
  address     String?
  totalOrders Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
}

model Order {
  id                String      @id @default(cuid())
  reference         String      @unique
  ecoManagerId      String?     @unique
  source            OrderSource @default(ECOMANAGER)
  status            OrderStatus @default(PENDING)
  
  // Customer information
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Agent assignment
  assignedAgentId String?
  assignedAgent   User?   @relation(fields: [assignedAgentId], references: [id])
  assignedAt      DateTime?

  // Order details
  total           Float
  shippingCost    Float?
  notes           String?
  internalNotes   String?

  // EcoManager specific
  ecoManagerStatus String?
  storeIdentifier  String?

  // Maystro integration
  trackingNumber      String?
  shippingStatus      String?
  maystroOrderId      String?
  alertedAt           DateTime?
  alertReason         String?
  abortReason         String?
  additionalMetaData  Json?

  // Timestamps
  orderDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items         OrderItem[]
  activities    AgentActivity[]
  notifications Notification[]
  webhookEvents WebhookEvent[]
  tickets       Ticket[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  sku         String?
  title       String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model AgentActivity {
  id          String       @id @default(cuid())
  agentId     String
  orderId     String?
  activityType ActivityType
  description String
  duration    Int?         // in minutes
  createdAt   DateTime     @default(now())

  // Relations
  agent User   @relation(fields: [agentId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("agent_activities")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  orderId   String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("notifications")
}

model ApiConfiguration {
  id            String   @id @default(cuid())
  storeName     String
  storeIdentifier String @unique
  apiToken      String
  baseUrl       String
  isActive      Boolean  @default(true)
  requestCount  Int      @default(0)
  lastUsed      DateTime?
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("api_configurations")
}

model WebhookEvent {
  id          String      @id @default(cuid())
  orderId     String?
  source      WebhookSource
  eventType   String
  payload     Json
  processed   Boolean     @default(false)
  error       String?
  createdAt   DateTime    @default(now())

  // Relations
  order Order? @relation(fields: [orderId], references: [id])

  @@map("webhook_events")
}

// Enums
enum UserRole {
  ADMIN
  TEAM_MANAGER
  COORDINATEUR
  AGENT_SUIVI
  AGENT_CALL_CENTER
}

enum AgentAvailability {
  ONLINE
  BUSY
  BREAK
  OFFLINE
}

enum OrderSource {
  ECOMANAGER
  GOOGLE_SHEETS
  SHOPIFY
  WOOCOMMERCE
  YOUCAN
  MANUAL
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum ActivityType {
  ORDER_ASSIGNED
  CUSTOMER_CALLED
  ORDER_CONFIRMED
  ORDER_CANCELLED
  NOTES_ADDED
  STATUS_CHANGED
  BREAK_STARTED
  BREAK_ENDED
  LOGIN
  LOGOUT
}

enum NotificationType {
  ORDER_ASSIGNMENT
  ORDER_UPDATE
  SYSTEM_ALERT
  SHIPPING_UPDATE
}

enum WebhookSource {
  ECOMANAGER
  MAYSTRO
}

model ProductCommission {
  id                    String   @id @default(cuid())
  productName          String   @unique
  packQuantity         Int      // 1, 2, or 4
  commissionCriteria   Json     // Flexible JSON structure for all commission rules
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("product_commissions")
}

model AgentCommissionRate {
  id                String   @id @default(cuid())
  agentId           String
  confirmationRate  Float    // Manually set confirmation rate
  period            String   // 'weekly' or 'monthly'
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  agent User @relation("AgentCommissionRates", fields: [agentId], references: [id])
  
  @@unique([agentId, period, startDate])
  @@map("agent_commission_rates")
}

model AgentProductConfirmationRate {
  id                String   @id @default(cuid())
  agentId           String
  productName       String   // Product name (normalized, not SKU)
  confirmationRate  Float    // Confirmation rate for this agent-product combination
  startDate         DateTime // Flexible start date
  endDate           DateTime // Flexible end date
  metadata          Json?    // Extensible metadata for future features (tags, notes, etc.)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  agent User @relation("AgentProductConfirmationRates", fields: [agentId], references: [id])
  
  @@unique([agentId, productName, startDate])
  @@map("agent_product_confirmation_rates")
}

model DefaultCommissionSettings {
  id                    String   @id @default(cuid())
  name                  String   @unique // "default" for the main settings
  settings              Json     // All commission settings in flexible JSON structure
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("default_commission_settings")
}

model ActivityLog {
  id              String          @id @default(cuid())
  timestamp       DateTime        @default(now())
  
  // User information
  userId          String?
  userName        String?
  userRole        UserRole?
  sessionId       String?
  
  // Action details
  action          String          // e.g., "LOGIN", "ORDER_UPDATE", "USER_CREATE"
  actionType      ActionType      // Category of action
  description     String          // Human-readable description
  logLevel        LogLevel        @default(INFO)
  
  // Resource information
  resourceType    String?         // e.g., "ORDER", "USER", "STORE"
  resourceId      String?         // ID of the affected resource
  
  // Change tracking
  oldValues       Json?           // Previous state (for updates)
  newValues       Json?           // New state (for updates)
  
  // Request context
  ipAddress       String?
  userAgent       String?
  endpoint        String?         // API endpoint called
  httpMethod      String?         // GET, POST, PUT, DELETE
  statusCode      Int?            // HTTP response status
  
  // Additional metadata
  metadata        Json?           // Flexible field for additional context
  
  // Relations
  user            User?           @relation("UserActivityLogs", fields: [userId], references: [id])
  
  @@index([timestamp])
  @@index([userId])
  @@index([actionType])
  @@index([logLevel])
  @@index([resourceType, resourceId])
  @@map("activity_logs")
}

enum ActionType {
  AUTHENTICATION     // Login, logout, password changes
  USER_MANAGEMENT    // User CRUD operations
  ORDER_MANAGEMENT   // Order operations
  STORE_MANAGEMENT   // Store configuration
  ASSIGNMENT         // Agent assignments
  COMMISSION         // Commission settings
  SYSTEM             // System events, sync operations
  WEBHOOK            // Webhook events
  API_CALL           // External API calls
  ERROR              // Error events
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}

model UserProductAssignment {
  id          String   @id @default(cuid())
  userId      String
  productName String   // Product name from OrderItem.title
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user User @relation("UserProductAssignments", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productName])
  @@index([userId])
  @@index([productName])
  @@map("user_product_assignments")
}

// Ticket System Models
model Ticket {
  id          String        @id @default(cuid())
  orderId     String
  reporterId  String        // Agent who reported the problem
  assigneeId  String?       // Team Manager or Coordinateur assigned to handle
  
  // Ticket details
  title       String
  category    TicketCategory
  priority    TicketPriority @default(MEDIUM)
  status      TicketStatus   @default(OPEN)
  description String
  
  // Metadata
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?
  closedAt    DateTime?
  
  // Relations
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  reporter    User          @relation("ReportedTickets", fields: [reporterId], references: [id])
  assignee    User?         @relation("AssignedTickets", fields: [assigneeId], references: [id])
  messages    TicketMessage[]
  
  @@index([orderId])
  @@index([reporterId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@map("tickets")
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String
  senderId  String
  message   String   @db.Text
  isInternal Boolean @default(false) // For internal notes between team members
  createdAt DateTime @default(now())
  
  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender    User     @relation("SentTicketMessages", fields: [senderId], references: [id])
  
  @@index([ticketId])
  @@index([senderId])
  @@map("ticket_messages")
}

// Ticket Enums
enum TicketCategory {
  CUSTOMER_ISSUE      // Customer unreachable, refused delivery, etc.
  PRODUCT_ISSUE       // Wrong item, damaged product, etc.
  DELIVERY_ISSUE      // Shipping problems, address issues, etc.
  SYSTEM_ISSUE        // Technical problems, app issues, etc.
  PAYMENT_ISSUE       // Payment problems, refunds, etc.
  OTHER               // Other issues
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_RESPONSE
  RESOLVED
  CLOSED
}

// Note Types Management Model
model NoteType {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("note_types")
}

// Wilaya Delivery Settings Model
model WilayaDeliverySettings {
  id              String   @id @default(cuid())
  wilayaName      String   @unique
  maxDeliveryDays Int      @default(2)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("wilaya_delivery_settings")
}
