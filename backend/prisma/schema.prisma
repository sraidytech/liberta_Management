// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      UserRole @default(AGENT_SUIVI)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Agent-specific fields
  agentCode     String?           @unique
  availability  AgentAvailability @default(OFFLINE)
  maxOrders     Int               @default(50)
  currentOrders Int               @default(0)

  // Relations
  assignedOrders   Order[]
  agentActivities  AgentActivity[]
  notifications    Notification[]
  createdApiConfigs ApiConfiguration[] @relation("CreatedBy")

  // NextAuth.js fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Customer {
  id          String   @id @default(cuid())
  fullName    String
  telephone   String
  email       String?
  wilaya      String
  commune     String
  address     String?
  totalOrders Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
}

model Order {
  id                String      @id @default(cuid())
  reference         String      @unique
  ecoManagerId      String?     @unique
  source            OrderSource @default(ECOMANAGER)
  status            OrderStatus @default(PENDING)
  
  // Customer information
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Agent assignment
  assignedAgentId String?
  assignedAgent   User?   @relation(fields: [assignedAgentId], references: [id])
  assignedAt      DateTime?

  // Order details
  total           Float
  shippingCost    Float?
  notes           String?
  internalNotes   String?

  // EcoManager specific
  ecoManagerStatus String?
  storeIdentifier  String?

  // Maystro integration
  trackingNumber   String?
  shippingStatus   String?
  maystroOrderId   String?

  // Timestamps
  orderDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items         OrderItem[]
  activities    AgentActivity[]
  notifications Notification[]
  webhookEvents WebhookEvent[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  productId   String
  title       String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model AgentActivity {
  id          String       @id @default(cuid())
  agentId     String
  orderId     String?
  activityType ActivityType
  description String
  duration    Int?         // in minutes
  createdAt   DateTime     @default(now())

  // Relations
  agent User   @relation(fields: [agentId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("agent_activities")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  orderId   String?
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("notifications")
}

model ApiConfiguration {
  id            String   @id @default(cuid())
  storeName     String
  storeIdentifier String @unique
  apiToken      String
  isActive      Boolean  @default(true)
  requestCount  Int      @default(0)
  lastUsed      DateTime?
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])

  @@map("api_configurations")
}

model WebhookEvent {
  id          String      @id @default(cuid())
  orderId     String?
  source      WebhookSource
  eventType   String
  payload     Json
  processed   Boolean     @default(false)
  error       String?
  createdAt   DateTime    @default(now())

  // Relations
  order Order? @relation(fields: [orderId], references: [id])

  @@map("webhook_events")
}

// Enums
enum UserRole {
  ADMIN
  TEAM_MANAGER
  AGENT_SUIVI
  AGENT_CALL_CENTER
}

enum AgentAvailability {
  ONLINE
  BUSY
  BREAK
  OFFLINE
}

enum OrderSource {
  ECOMANAGER
  GOOGLE_SHEETS
  SHOPIFY
  WOOCOMMERCE
  YOUCAN
  MANUAL
}

enum OrderStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum ActivityType {
  ORDER_ASSIGNED
  CUSTOMER_CALLED
  ORDER_CONFIRMED
  ORDER_CANCELLED
  NOTES_ADDED
  STATUS_CHANGED
  BREAK_STARTED
  BREAK_ENDED
  LOGIN
  LOGOUT
}

enum NotificationType {
  ORDER_ASSIGNMENT
  ORDER_UPDATE
  SYSTEM_ALERT
  SHIPPING_UPDATE
}

enum WebhookSource {
  ECOMANAGER
  MAYSTRO
}
